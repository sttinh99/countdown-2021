{"version":3,"sources":["images/festival.svg","images/fireworks.svg","sounds/clock.mp3","contextAPI/TimeContext.js","components/TimeProvider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TimeContext","React","createContext","NewYears","Date","props","state","days","hours","minutes","seconds","setInterval","CurrentDay","setState","Math","floor","Provider","value","this","children","Component","App","className","src","fireworks","alt","width","height","festival","Consumer","times","autoPlay","loop","soundsClock","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,+OCG5BC,EADKC,IAAMC,gBCCpBC,EAAW,IAAIC,KAAK,c,oDAGxB,WAAYC,GAAQ,IAAD,8BACjB,gBACKC,MAAQ,CACXC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,GANM,E,gEASE,IAAD,OAClBC,aAAY,WACV,IAAMC,EAAa,IAAIR,KACvB,EAAKS,SAAS,CACZN,KAAMO,KAAKC,OAAOZ,EAAWS,GAAZ,OACjBJ,MAAOM,KAAKC,OAAOZ,EAAWS,GAAZ,MAA2C,GAC7DH,QAAUK,KAAKC,OAAOZ,EAAWS,GAAZ,KAAyC,GAAM,GACpEF,QAASI,KAAKC,OAAOZ,EAAWS,GAAc,KAAQ,OAEvD,O,+BAGH,OACE,kBAAC,EAAYI,SAAb,CACEC,MAAO,CACLV,KAAMW,KAAKZ,MAAMC,KACjBC,MAAOU,KAAKZ,MAAME,MAClBC,QAASS,KAAKZ,MAAMG,QACpBC,QAASQ,KAAKZ,MAAMI,UAGrBQ,KAAKb,MAAMc,c,GA/BSC,aC4CdC,MAxCf,WACE,OACE,kBAAC,EAAD,KACE,yBAAKC,UAAU,OACb,4CAEE,yBAAKC,IAAKC,IAAWC,IAAI,YAAYC,MAAM,OAAOC,OAAO,SACzD,yBAAKJ,IAAKK,IAAUH,IAAI,WAAWC,MAAM,OAAOC,OAAO,UAGzD,kBAAC,EAAYE,SAAb,MACG,SAACC,GAAD,OACC,yBAAKR,UAAU,oBACb,2BAAOS,UAAQ,EAACC,MAAI,GAClB,4BAAQT,IAAKU,OAEf,4BACGH,EAAMvB,KACP,wCAEF,4BACGuB,EAAMtB,MACP,yCAEF,4BACGsB,EAAMrB,QACP,2CAEF,4BACGqB,EAAMpB,QACP,gDAMV,gDCjCcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8515dd72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/festival.d9960598.svg\";","module.exports = __webpack_public_path__ + \"static/media/fireworks.8f949f5c.svg\";","module.exports = __webpack_public_path__ + \"static/media/clock.2e0413fe.mp3\";","import React from \"react\";\r\n\r\nconst TimeContext = React.createContext();\r\nexport default TimeContext;\r\n","import React, { Component } from \"react\";\r\n\r\nimport TimeContext from \"../contextAPI/TimeContext\";\r\nconst NewYears = new Date(\"1 Jan 2021\");\r\n\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      days: 0,\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    setInterval(() => {\r\n      const CurrentDay = new Date();\r\n      this.setState({\r\n        days: Math.floor((NewYears - CurrentDay) / (1000 * 24 * 3600)),\r\n        hours: Math.floor((NewYears - CurrentDay) / (1000 * 3600)) % 24,\r\n        minutes: (Math.floor((NewYears - CurrentDay) / (1000 * 60)) % 60) % 60,\r\n        seconds: Math.floor((NewYears - CurrentDay) / 1000) % 60,\r\n      });\r\n    }, 1000);\r\n  }\r\n  render() {\r\n    return (\r\n      <TimeContext.Provider\r\n        value={{\r\n          days: this.state.days,\r\n          hours: this.state.hours,\r\n          minutes: this.state.minutes,\r\n          seconds: this.state.seconds,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </TimeContext.Provider>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport festival from \"./images/festival.svg\";\nimport fireworks from \"./images/fireworks.svg\";\nimport soundsClock from \"./sounds/clock.mp3\";\n\nimport TimeProvider from \"./components/TimeProvider\";\nimport TimeContext from \"./contextAPI/TimeContext\";\n\nfunction App() {\n  return (\n    <TimeProvider>\n      <div className=\"App\">\n        <h1>\n          New Year 2021\n          <img src={fireworks} alt=\"fireworks\" width=\"30px\" height=\"30px\" />\n          <img src={festival} alt=\"festival\" width=\"30px\" height=\"30px\" />\n        </h1>\n\n        <TimeContext.Consumer>\n          {(times) => (\n            <div className=\"format-countdown\">\n              <audio autoPlay loop>\n                <source src={soundsClock}></source>\n              </audio>\n              <h1>\n                {times.days}\n                <span> days</span>\n              </h1>\n              <h1>\n                {times.hours}\n                <span> hours</span>\n              </h1>\n              <h1>\n                {times.minutes}\n                <span> minutes</span>\n              </h1>\n              <h1>\n                {times.seconds}\n                <span> seconds</span>\n              </h1>\n            </div>\n          )}\n        </TimeContext.Consumer>\n      </div>\n      <span>by: sttinh99</span>\n    </TimeProvider>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}